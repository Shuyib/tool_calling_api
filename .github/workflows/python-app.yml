name: CI/CD

on: [push, pull_request]

jobs:
  install_lintcode:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.12
        uses: actions/setup-python@v3
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black

      - name: Run Black Linter
        run: |
          black --check .
      - name: Lint Dockerfiles
        continue-on-error: true  # Continue workflow even if linting fails
        run: |
          echo "Linting Dockerfile.app:"
          docker run --rm -i hadolint/hadolint < Dockerfile.app || true
          echo "-------------------"
          echo "Linting Dockerfile.ollama:"
          docker run --rm -i hadolint/hadolint < Dockerfile.ollama || true

  build-and-test:
    needs: install_lintcode
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
    
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
    
      - name: Install dependencies
        run: make install

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

  docker-build:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Build Docker images
        timeout-minutes: 5
        continue-on-error: true
        env:
          AT_USERNAME: ${{ secrets.AT_USERNAME }}
          AT_API_KEY: ${{ secrets.AT_API_KEY }}
        run: |
          make docker_run
    
      - name: Check build status
        run: |
          if [ "$(docker ps -q)" ]; then
            echo "Containers running successfully"
          else
            echo "No containers running"
            exit 1
          fi

      - name: Cleanup Docker resources
        if: always()
        timeout-minutes: 5
        run: |
          docker-compose down --remove-orphans --timeout 30
          docker system prune -af --volumes
